{"version":3,"sources":["pages/LoginForm.js","pages/RegistrationForm.js","pages/WelcomePage.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","useState","username","setUsername","password","setpassword","error","setError","checkLogin","a","fetch","method","body","JSON","stringify","result","json","status","window","sessionStorage","setItem","token","location","href","id","class","type","value","onChange","event","target","placeholder","required","onClick","RegistraionForm","setPassword","confirmPassword","setConfirmPassword","email","setEmail","registerUser","WelcomePage","performLogout","userToken","getItem","removeItem","to","Fragment","App","path","component","RegistrationForm","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.eee0b4a6.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\n\r\nconst LoginForm = () => {\r\n    \r\n    const [username, setUsername] = useState('');\r\n    const [password, setpassword] = useState('')\r\n    const [error, setError] = useState('');\r\n\r\n    const checkLogin = async () => {\r\n        if (username !== '' || password !== ''){\r\n\r\n            const result = await fetch(`https://9il287rnf8.execute-api.us-east-1.amazonaws.com/mvp/login`, {\r\n                method: 'post',\r\n                body: JSON.stringify({username, password}),\r\n                //header is not required since the request is in plain text\r\n            });\r\n            const body = await result.json();\r\n            if (body.status === 200){\r\n                window.sessionStorage.setItem('username', username);\r\n                window.sessionStorage.setItem('userToken', body.token);\r\n                window.location.href='/welcome';\r\n            }\r\n            else{\r\n                setError(body.error);\r\n            }\r\n        }\r\n        else{\r\n            setError('Either username or password not filled');\r\n        }\r\n        \r\n        \r\n    };\r\n\r\n    /*const username = window.sessionStorage.getItem('username');*/\r\n\r\n\r\n    return (\r\n        <div id = \"screen-body\">\r\n            <div class = \"login\">\r\n                <h1>Login</h1>\r\n                <br/>\r\n                <small>{error}</small>\r\n                <input type = \"text\" value = {username} onChange= {(event) => setUsername(event.target.value)} placeholder=\"username\" required=\"required\"/>\r\n                <input type = \"password\" value = {password} onChange= {(event) => setpassword(event.target.value)} placeholder=\"password\" required=\"required\"/>\r\n                <button onClick={ checkLogin } class=\"btn btn-primary btn-block btn-large\">Login</button> \r\n                <button onClick={event =>  window.location.href='/registration'} class=\"btn btn-primary btn-block btn-large\">Register</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginForm;","import React,{useState} from 'react';\r\n\r\nconst RegistraionForm = () => {\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [error, setError] = useState('');\r\n\r\n    const registerUser = async () => {\r\n        if (password === confirmPassword){\r\n            const result = await fetch(`https://9il287rnf8.execute-api.us-east-1.amazonaws.com/mvp/register`, {\r\n                method: 'post',\r\n                body: JSON.stringify({username, password, email}),\r\n                //header is not required since the request is in plain text\r\n            });\r\n            const body = await result.json();\r\n            if (body.status === 200){\r\n                window.location.href='/login';\r\n            }\r\n            else{\r\n                setError(body.error)\r\n            }\r\n        }\r\n        else{\r\n            setError(\"Passwords don't match\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div class = \"login\">\r\n            <h1>Register Here!</h1>\r\n            <br/>\r\n            <small>{error}</small>\r\n            <input type = \"text\" value = {email} onChange= {(event) => setEmail(event.target.value)} placeholder=\"e-mail ID\" required=\"required\" />\r\n            <input type = \"text\" value = {username} onChange= {(event) => setUsername(event.target.value)} placeholder=\"username\" required=\"required\"/>\r\n            <input type = \"password\" value = {password} onChange= {(event) => setPassword(event.target.value)} placeholder=\"password\" required=\"required\"/>\r\n            <input type = \"password\" value = {confirmPassword} onChange= {(event) => setConfirmPassword(event.target.value)} placeholder=\"confirm password\" required=\"required\"/>\r\n            <button onClick={registerUser} class=\"btn btn-primary btn-block btn-large\">Register</button>\r\n            <button onClick={event =>  window.location.href='/'} class=\"btn btn-primary btn-block btn-large\">Login Instead</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RegistraionForm;","import React from 'react';\r\nimport {Redirect } from 'react-router-dom';\r\n\r\nconst WelcomePage = () =>{\r\n\r\n    const performLogout = async () => {\r\n        const userToken = window.sessionStorage.getItem('userToken');\r\n\r\n        const result = await fetch(`https://9il287rnf8.execute-api.us-east-1.amazonaws.com/mvp/logout`, {\r\n            method: 'post',\r\n            body: JSON.stringify({token: userToken}),\r\n            //header is not required since the request is in plain text\r\n        });\r\n        window.sessionStorage.removeItem('username');\r\n        window.sessionStorage.removeItem('userToken');\r\n        window.location.href='/login'\r\n    };\r\n\r\n    const username = window.sessionStorage.getItem('username');\r\n\r\n    if (username === null){\r\n        \r\n        return <Redirect to='/login'  />\r\n        \r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Hello {username} , welcome to my social media site</h1>\r\n            <p>\r\n                Welcome to this page and happy sharing\r\n            </p>\r\n            <p>\r\n                I'm still welcoming you\r\n            </p>\r\n            <button onClick={ performLogout } >Logout</button>\r\n        </React.Fragment>\r\n    );\r\n} \r\n\r\nexport default WelcomePage;","import React from 'react';\nimport{\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport LoginForm from './pages/LoginForm';\nimport RegistrationForm from './pages/RegistrationForm';\nimport WelcomePage from './pages/WelcomePage';\nimport './App.css';\n\n\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/registration\" component={RegistrationForm}/>\n        <Route path=\"/login\" component={LoginForm} />\n        <Route path=\"/welcome\" component={WelcomePage} />\n        <Route path=\"/\" component={LoginForm} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}